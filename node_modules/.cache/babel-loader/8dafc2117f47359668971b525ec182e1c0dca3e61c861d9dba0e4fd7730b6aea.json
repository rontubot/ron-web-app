{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'https://ron-production.up.railway.app/';\nclass RonAPI {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.detail || 'Error en la petici贸n');\n      }\n      return data;\n    } catch (error) {\n      console.error('API Error:', error);\n      throw error;\n    }\n  }\n\n  // Endpoints de autenticaci贸n  \n  async register(username, password, email) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password,\n        email\n      })\n    });\n  }\n  async login(username, password) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n  }\n  async logout(token) {\n    return this.request('/auth/logout', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  }\n\n  // Endpoint principal de chat  \n  async chatWithRon(text, token) {\n    return this.request('/ron', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n\n  // Endpoints de usuario  \n  async getUserProfile(token) {\n    return this.request('/user/profile', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  }\n  async getUserConversations(token) {\n    return this.request('/user/conversations', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  }\n\n  // Endpoints de utilidad  \n  async healthCheck() {\n    return this.request('/health');\n  }\n  async getMemoryStatus(token) {\n    return this.request('/memory-status', {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n  }\n}\nexport const ronAPI = new RonAPI();\nexport default ronAPI;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","RonAPI","constructor","baseURL","request","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","detail","error","console","register","username","password","email","method","body","JSON","stringify","login","logout","token","chatWithRon","text","getUserProfile","getUserConversations","healthCheck","getMemoryStatus","ronAPI"],"sources":["/workspaces/ron-web-app/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'https://ron-production.up.railway.app/';  \r\n  \r\nclass RonAPI {  \r\n  constructor() {  \r\n    this.baseURL = API_BASE_URL;  \r\n  }  \r\n  \r\n  async request(endpoint, options = {}) {  \r\n    const url = `${this.baseURL}${endpoint}`;  \r\n    const config = {  \r\n      headers: {  \r\n        'Content-Type': 'application/json',  \r\n        ...options.headers,  \r\n      },  \r\n      ...options,  \r\n    };  \r\n  \r\n    try {  \r\n      const response = await fetch(url, config);  \r\n      const data = await response.json();  \r\n        \r\n      if (!response.ok) {  \r\n        throw new Error(data.detail || 'Error en la petici贸n');  \r\n      }  \r\n        \r\n      return data;  \r\n    } catch (error) {  \r\n      console.error('API Error:', error);  \r\n      throw error;  \r\n    }  \r\n  }  \r\n  \r\n  // Endpoints de autenticaci贸n  \r\n  async register(username, password, email) {  \r\n    return this.request('/auth/register', {  \r\n      method: 'POST',  \r\n      body: JSON.stringify({ username, password, email }),  \r\n    });  \r\n  }  \r\n  \r\n  async login(username, password) {  \r\n    return this.request('/auth/login', {  \r\n      method: 'POST',  \r\n      body: JSON.stringify({ username, password }),  \r\n    });  \r\n  }  \r\n  \r\n  async logout(token) {  \r\n    return this.request('/auth/logout', {  \r\n      method: 'POST',  \r\n      headers: {  \r\n        'Authorization': `Bearer ${token}`,  \r\n      },  \r\n    });  \r\n  }  \r\n  \r\n  // Endpoint principal de chat  \r\n  async chatWithRon(text, token) {  \r\n    return this.request('/ron', {  \r\n      method: 'POST',  \r\n      headers: {  \r\n        'Authorization': `Bearer ${token}`,  \r\n      },  \r\n      body: JSON.stringify({ text }),  \r\n    });  \r\n  }  \r\n  \r\n  // Endpoints de usuario  \r\n  async getUserProfile(token) {  \r\n    return this.request('/user/profile', {  \r\n      method: 'GET',  \r\n      headers: {  \r\n        'Authorization': `Bearer ${token}`,  \r\n      },  \r\n    });  \r\n  }  \r\n  \r\n  async getUserConversations(token) {  \r\n    return this.request('/user/conversations', {  \r\n      method: 'GET',  \r\n      headers: {  \r\n        'Authorization': `Bearer ${token}`,  \r\n      },  \r\n    });  \r\n  }  \r\n  \r\n  // Endpoints de utilidad  \r\n  async healthCheck() {  \r\n    return this.request('/health');  \r\n  }  \r\n  \r\n  async getMemoryStatus(token) {  \r\n    return this.request('/memory-status', {  \r\n      method: 'GET',  \r\n      headers: {  \r\n        'Authorization': `Bearer ${token}`,  \r\n      },  \r\n    });  \r\n  }  \r\n}  \r\n  \r\nexport const ronAPI = new RonAPI();  \r\nexport default ronAPI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}